name: DEV - Upload CustomMapLabels

on:
  # 允许手动触发此工作流
  workflow_dispatch:
    inputs:
      version:
        description: 'Mod 版本号 (例如: 1.0)'
        required: true
        default: '1.0'

jobs:
  # =====================================================================================
  # Job 1: 更新变更日志 (Changelog) 并将其推送回仓库
  # 这个任务在标准的 Ubuntu 环境中运行，以确保 Git 操作的兼容性和稳定性。
  # =====================================================================================
  changelog:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1: 检出仓库代码
      # 使用 actions/checkout 来获取仓库的最新代码。
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 更新变更日志历史文件
      # - 将 RELEASE_NOTES.md 的内容追加到 CHANGELOG.md 的顶部。
      # - 重置 RELEASE_NOTES.md 文件，以便为下一次更新做准备。
      - name: Update Changelog History
        run: |
          # 创建一个临时文件来合并变更日志
          temp_changelog_history=$(mktemp)
          
          # 写入新版本的标题和日期
          echo "## Version ${{ github.event.inputs.version }} - $(date +'%Y-%m-%d')" > "$temp_changelog_history"
          echo "" >> "$temp_changelog_history"
          
          # 将当前更新日志追加到临时文件中
          cat RELEASE_NOTES.md >> "$temp_changelog_history"
          echo "" >> "$temp_changelog_history"
          echo "---" >> "$temp_changelog_history"
          echo "" >> "$temp_changelog_history"
          
          # 将旧的变更日志历史追加到临时文件末尾
          cat CHANGELOG.md >> "$temp_changelog_history"
          
          # 用合并后的内容覆盖 CHANGELOG.md
          mv "$temp_changelog_history" CHANGELOG.md
          
          # 重置 RELEASE_NOTES.md 文件
          echo "在此处填写下一次更新日志...(填写前删除本行)" > RELEASE_NOTES.md

      # 步骤 3: 提交并推送变更
      # - 配置 Git 用户信息。
      # - 将修改后的文件（CHANGELOG.md 和 RELEASE_NOTES.md）添加到暂存区。
      # - 提交变更并推送到远程仓库。
      - name: Commit and Push Changelog
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add CHANGELOG.md RELEASE_NOTES.md
          # 检查是否有文件变更，避免在没有变更时提交空内容
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Docs: Update CHANGELOG for version ${{ github.event.inputs.version }}"
            git push
          fi

  # =====================================================================================
  # Job 2: 上传 Mod 到 Steam Workshop
  # 这个任务依赖于 'changelog' 任务的成功完成。
  # 它在包含 SteamCMD 的 Docker 容器中运行，专门用于处理与 Steam 相关的操作。
  # =====================================================================================
  upload-to-steam:
    runs-on: ubuntu-latest
    needs: changelog # 确保此任务在 'changelog' 任务成功后运行
    container: cm2network/steamcmd:root # 使用预装了 SteamCMD 的 Docker 容器

    steps:
      # 步骤 1: 检出仓库代码
      # 每个任务都在一个独立的环境中运行，因此需要再次检出代码。
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 缓存 apt 包
      # 缓存系统包以加快后续运行速度。
      - name: Cache apt packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-packages-${{ hashFiles('**/workflow.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-packages-

      # 步骤 3: 安装依赖
      # 在容器内安装 Node.js 和 npm。
      - name: Install Dependencies
        run: |
          apt-get update
          apt-get install -y nodejs npm

      # 步骤 4: 读取本次更新的日志
      # 从 RELEASE_NOTES.md 中读取内容，作为上传到 Steam Workshop 时的更新说明。
      - name: Read changelog for current update
        id: get_changelog
        run: |
          content=$(cat RELEASE_NOTES.md)
          {
            echo "text<<EOF"
            echo "$content"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # 步骤 5: 准备 Mod 文件以上传
      # - 创建用于分发的目录结构。
      # - 将 Mod 文件和预览图复制到分发目录中。
      - name: Prepare Mod files for upload
        run: |
          mkdir -p dist/mods/CustomMapLabels
          cp -r src/CustomMapLabels/* dist/mods/CustomMapLabels/
          cp src/preview.png dist/preview.png
          echo "Mod files have been structured from 'src/CustomMapLabels' directory."
          ls -R dist

      # 步骤 6: 更新 mod.info 文件中的版本号
      # 使用输入的版本号更新 Mod 的元数据文件。
      - name: Update mod.info with new version
        run: |
          sed -i 's/^version=.*/version=${{ github.event.inputs.version }}/' dist/mods/CustomMapLabels/mod.info

      # 步骤 7: 生成 Steam Guard TOTP 验证码
      # 使用共享密钥生成用于两步验证的动态验证码。
      - name: Generate Steam Guard TOTP
        id: totp
        uses: CyberAndrii/steam-totp@v1
        with:
          shared_secret: ${{ secrets.STEAM_TFA_SEED }}

      # 步骤 8: 上传到 Steam Workshop
      # 使用 m00nl1ght-dev/steam-workshop-deploy 操作来执行上传。
      - name: Upload to Steam Workshop
        uses: m00nl1ght-dev/steam-workshop-deploy@v4
        with:
          username: ${{ secrets.STEAM_USERNAME }}
          password: ${{ secrets.STEAM_PASSWORD }}
          totp: ${{ steps.totp.outputs.code }}
          
          appId: 108600 # Project Zomboid 的 App ID
          publishedFileId: ${{ secrets.WORKSHOP_ID_TEST }}
          path: "dist"
          changeNote: "${{ steps.get_changelog.outputs.text }}"